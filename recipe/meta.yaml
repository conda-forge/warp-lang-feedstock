{% set name = "warp-lang" %}
{% set version = "1.4.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/NVIDIA/warp/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 1bff115c88ca8a70837cfffbebccd5a6c1d203db2d211c8a4277e76f1eb4d569
  patches:
    - 01-find_g++_env.patch
    - 02-add_macro_def_build.patch
    - 03-install_deps_llvm_conda.patch
    - 04-find_nvcc_env.patch

build:
  string: cpu{{ CONDA_PY }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  number: 1
  skip: true  # [cuda_compiler_version == "11.2"]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - {{ stdlib("c") }}
    - cmake
    - libxcrypt   # [linux]
    - libxcrypt1  # [linux]
    - ninja
  host:
    - cuda-cudart-dev    # [(cuda_compiler_version or "").startswith("12") and win]
    - cuda-nvcc          # [(cuda_compiler_version or "").startswith("12") and win]
    - cuda-nvrtc-dev     # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvrtc-static  # [(cuda_compiler_version or "").startswith("12")]
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - python
    - pip
    - setuptools
    - gitpython
    - libxcrypt   # [linux]
    - libxcrypt1  # [linux]
    - numpy
  run:
    - __cuda   # [cuda_compiler_version != "None"]
    - python
    - numpy
    - jax  # [not win]
    - libxcrypt   # [linux]
    - libxcrypt1  # [linux]
    - scipy
    - treelib
    - typeguard

test:
  imports:
    - warp
  commands:
    - pip check
    # Testing main functionalities to avoid OOM errors
    - python -m warp.tests -s autodetect -p 'test_c*.py' -p 'test_m*.py' -p 'test_s*.py'
  requires:
    - python
    - pip
    - pytest

about:
  home: https://github.com/NVIDIA/warp
  summary: 'A Python framework for high-performance simulation and graphics programming.'
  license: LicenseRef-NvidiaProprietary
  license_file:
    - LICENSE.md
    - warp/native/cutlass/LICENSE.txt
    - licenses/llvm-LICENSE.txt

extra:
  recipe-maintainers:
    - flferretti
    - traversaro
